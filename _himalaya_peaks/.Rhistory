st_write(poly, outfile, append=F)
outfile_dem = here("output", glue("{name}.tif"))
if(file.exists(outfile_dem)) file.remove(outfile_dem)
command = glue::glue("gdalwarp -dstnodata 0 -crop_to_cutline -cutline {outfile} {path_dem} {outfile_dem}")
system(command)
outfile_dem_scaled = here("output", glue("{name}_scaled.tif"))
command_rescale = glue::glue("gdal_translate -scale 0 255 0 6500 -ot UInt16 {outfile_dem} {outfile_dem_scaled}")
system(command_rescale)
}
library(stars)
library(sf)
library(here)
library(terra)
library(glue)
# path --------------------------------------------------------------------
path_dem = here("data_raw/himalaya0002.vrt")
path_points = here("data_raw/mountains.csv")
# read data ---------------------------------------------------------------
dem = read_stars(path_dem)
points = read_sf(path_points)
points = st_as_sf(points, coords = c("lon", "lat"), crs=4326)
# create the buffer -------------------------------------------------------
buf = st_buffer(points, 50000)
# write out each ----------------------------------------------------------
for (i in 1:nrow(buf)) {
poly = buf[i,]
name = poly$name %>% tolower() %>% gsub("[.-\\s]", "", .) %>% gsub("\\s*", "", .)
outfile = here("output", paste0(name, ".shp"))
st_write(poly, outfile, append=F)
outfile_dem = here("output", glue("{name}.tif"))
if(file.exists(outfile_dem)) file.remove(outfile_dem)
command = glue::glue("gdalwarp -dstnodata 0 -crop_to_cutline -cutline {outfile} {path_dem} {outfile_dem}")
system(command)
outfile_dem_scaled = here("output", glue("{name}_scaled.tif"))
command_rescale = glue::glue("gdal_translate -scale 0 10000 0 65000 -ot UInt16 {outfile_dem} {outfile_dem_scaled}")
system(command_rescale)
}
# path --------------------------------------------------------------------
path_dem = here("data_raw/himalaya0002.vrt")
library(stars)
jjk
library(sf)
library(here)
library(terra)
library(glue)
# path --------------------------------------------------------------------
path_dem = here("data_raw/himalaya0002.vrt")
path_points = here("data_raw/mountains.csv")
# read data ---------------------------------------------------------------
dem = read_stars(path_dem)
points = read_sf(path_points)
points = st_as_sf(points, coords = c("lon", "lat"), crs=4326)
# create the buffer -------------------------------------------------------
buf = st_buffer(points, 50000)
plot(buf)
points
seq_along(points)
i = 1
point = points[i,]
point
coords = st_coordinates(point)
coords
st_bbox()
bb_coords = st_bbox("xmin" = 1, "ymin" = 2, "xmax" = 3, "ymax" = 4)
bb_coords = st_bbox(c("xmin" = 1, "ymin" = 2, "xmax" = 3, "ymax" = 4))
bb_coords
bb_coords = st_bbox(c("xmin" = coords[1] - radius,
"ymin" = coords[2] - radius,
"xmax" = coords[1] + radius,
"ymax" = coords[2] + radius))
# square buffers ----------------------------------------------------------
radius = .2 # degree
bb_coords = st_bbox(c("xmin" = coords[1] - radius,
"ymin" = coords[2] - radius,
"xmax" = coords[1] + radius,
"ymax" = coords[2] + radius))
bb_coords
st_as_sf(bb_coords)
st_as_sfc(bb_coords)
poly = st_as_sfc(bb_coords)
plot(poly)
poly = vector("list", lengt=nrow(points))
polys = vector("list", lengt=nrow(points))
for (i in seq_along(points)) {
point = points[i,]
coords = st_coordinates(point)
bb_coords = st_bbox(c("xmin" = coords[1] - radius,
"ymin" = coords[2] - radius,
"xmax" = coords[1] + radius,
"ymax" = coords[2] + radius))
poly = st_as_sfc(bb_coords)
polys[[i]] = poly
}
for (i in seq_along(points)) {
print(i)
point = points[i,]
coords = st_coordinates(point)
bb_coords = st_bbox(c("xmin" = coords[1] - radius,
"ymin" = coords[2] - radius,
"xmax" = coords[1] + radius,
"ymax" = coords[2] + radius))
poly = st_as_sfc(bb_coords)
polys[[i]] = poly
}
i = 6
point = points[i,]
point
points
seq_len(points)
# square buffers ----------------------------------------------------------
radius = .2 # degree
polys = vector("list", lengt=nrow(points))
for (i in 1:nrow(points)) {
print(i)
point = points[i,]
coords = st_coordinates(point)
bb_coords = st_bbox(c("xmin" = coords[1] - radius,
"ymin" = coords[2] - radius,
"xmax" = coords[1] + radius,
"ymax" = coords[2] + radius))
poly = st_as_sfc(bb_coords)
polys[[i]] = poly
}
polys
as.data.frame(polys)
polys = c()
for (i in 1:nrow(points)) {
point = points[i,]
coords = st_coordinates(point)
bb_coords = st_bbox(c("xmin" = coords[1] - radius,
"ymin" = coords[2] - radius,
"xmax" = coords[1] + radius,
"ymax" = coords[2] + radius))
poly = st_as_sfc(bb_coords)
polys[[i]] = poly
}
polys
as.data.frame(polys)
as.list(polys)
data.frame(a = polys)
rbind(polys)
st_as_sf(rbind(polys))
st_as_sf(polys)
st_as_sf(polys[[1]], polys[[2]])
polys[[1]]
polys[[2]]
# square buffers ----------------------------------------------------------
radius = .2 # degree
for (i in 1:nrow(points)) {
point = points[i,]
coords = st_coordinates(point)
bb_coords = st_bbox(c("xmin" = coords[1] - radius,
"ymin" = coords[2] - radius,
"xmax" = coords[1] + radius,
"ymax" = coords[2] + radius))
poly = st_as_sfc(bb_coords, crs=4326)
polys[[i]] = poly
}
df = data.frame()
df = data.frame()
for (i in 1:nrow(points)) {
point = points[i,]
coords = st_coordinates(point)
bb_coords = st_bbox(c("xmin" = coords[1] - radius,
"ymin" = coords[2] - radius,
"xmax" = coords[1] + radius,
"ymax" = coords[2] + radius))
poly = st_as_sfc(bb_coords, crs=4326)
df[["geom"]][[i]] = poly
}
df = data.frame(id = 1:nrow(points))
df
for (i in 1:nrow(points)) {
point = points[i,]
coords = st_coordinates(point)
bb_coords = st_bbox(c("xmin" = coords[1] - radius,
"ymin" = coords[2] - radius,
"xmax" = coords[1] + radius,
"ymax" = coords[2] + radius))
poly = st_as_sfc(bb_coords, crs=4326)
df[["geom"]][[i]] = poly
}
df
i=1
point = points[i,]
coords = st_coordinates(point)
bb_coords = st_bbox(c("xmin" = coords[1] - radius,
"ymin" = coords[2] - radius,
"xmax" = coords[1] + radius,
"ymax" = coords[2] + radius))
poly = st_as_sfg(bb_coords, crs=4326)
poly = st_sfc(bb_coords, crs=4326)
poly = st_as_sfc(bb_coords, crs=4326)
poly
poly = st_sfc(bb_coords, crs=4326)
df = data.frame(id = 1:nrow(points))
# square buffers ----------------------------------------------------------
radius = .2 # degree
df = data.frame(id = 1:nrow(points))
df
point = points[i,]
coords = st_coordinates(point)
bb_coords = st_bbox(c("xmin" = coords[1] - radius,
"ymin" = coords[2] - radius,
"xmax" = coords[1] + radius,
"ymax" = coords[2] + radius))
poly = st_as_sfc(bb_coords, crs=4326)
df[["geom"]][[i]] = poly
df
bb_coords = st_bbox(c("xmin" = coords[1] - radius,
"ymin" = coords[2] - radius,
"xmax" = coords[1] + radius,
"ymax" = coords[2] + radius))
bb_coords
df = vector("list", lengt=nrow(points))
df
polys = vector("list", lengt=nrow(points))
polys = vector("list", lengt=nrow(points))
for (i in 1:nrow(points)) {
point = points[i,]
coords = st_coordinates(point)
bb_coords = st_bbox(c("xmin" = coords[1] - radius,
"ymin" = coords[2] - radius,
"xmax" = coords[1] + radius,
"ymax" = coords[2] + radius))
polys[[i]] = bb_coords
}
polys
st_as_sf(bb_coords)
st_as_sfc(bb_coords)
# square buffers ----------------------------------------------------------
radius = .2 # degree
polys = vector("list", lengt=nrow(points))
for (i in 1:nrow(points)) {
point = points[i,]
coords = st_coordinates(point)
bb_coords = st_bbox(c("xmin" = coords[1] - radius,
"ymin" = coords[2] - radius,
"xmax" = coords[1] + radius,
"ymax" = coords[2] + radius))
bb = st_as_sfc(bb_coords)
polys[[i]] = bb
}
polys
st_sf(polys)
rbind(polys)
st_sf(rbind(polys))
st_polygon()
bb_coords = st_bbox(c("xmin" = coords[1] - radius,
"ymin" = coords[2] - radius,
"xmax" = coords[1] + radius,
"ymax" = coords[2] + radius))
bb = st_polygon(bb_coords)
bb_coords
bb = st_polygon(as.list(bb_coords))
bb_coords = st_bbox(c("xmin" = coords[1] - radius,
"ymin" = coords[2] - radius,
"xmax" = coords[1] + radius,
"ymax" = coords[2] + radius))
bb_coords
st_polygon(list(cbind(c(0,3,3,0,0),c(0,0,3,3,0)))))
st_polygon(list(cbind(c(0,3,3,0,0),c(0,0,3,3,0))))
list(cbind(c(0,3,3,0,0),c(0,0,3,3,0)))
bb_coords = st_bbox(c("xmin" = coords[1] - radius,
"ymin" = coords[2] - radius,
"xmax" = coords[1] + radius,
"ymax" = coords[2] + radius))
bb_coords
bb_coords = st_bbox(c("xmin" = coords[1] - radius,
"ymin" = coords[2] - radius,
"xmax" = coords[1] + radius,
"ymax" = coords[2] + radius))
bb_coords
bb = st_as_sfc(bb_coords)
bb
bb = st_as_sfc(bb_coords, crs=4326)
bb
bb = st_as_sfc(bb_coords) %>% st_as_sf
bb
bb = st_as_sfc(bb_coords) %>% st_as_sf(crs=4326)
bb
polys = vector("list", lengt=nrow(points))
for (i in 1:nrow(points)) {
point = points[i,]
coords = st_coordinates(point)
bb_coords = st_bbox(c("xmin" = coords[1] - radius,
"ymin" = coords[2] - radius,
"xmax" = coords[1] + radius,
"ymax" = coords[2] + radius))
bb = st_as_sfc(bb_coords) %>% st_as_sf(crs=4326)
polys[[i]] = bb
}
bb
polys
st_as_sf(polys)
do.call("rbind", polys)
do.call("rbind", polys) %>% st_as_sf()
a  = do.call("rbind", polys) %>% st_as_sf()
a
names(a)
polys = vector("list", lengt=nrow(points))
for (i in 1:nrow(points)) {
point = points[i,]
coords = st_coordinates(point)
bb_coords = st_bbox(c("xmin" = coords[1] - radius,
"ymin" = coords[2] - radius,
"xmax" = coords[1] + radius,
"ymax" = coords[2] + radius))
bb = st_as_sfc(bb_coords) %>% st_as_sf(crs=4326)
polys[[i]] = bb
}
df_sf = do.call("rbind", polys) %>% st_as_sf()
df_sf
plot(df_sf)
# write out each ----------------------------------------------------------
for (i in 1:nrow(df_sf)) {
poly = buf[i,]
name = poly$name %>% tolower() %>% gsub("[.-\\s]", "", .) %>% gsub("\\s*", "", .)
outfile = here("output", paste0(name, ".shp"))
st_write(poly, outfile, append=F)
outfile_dem = here("output", glue("{name}.tif"))
if(file.exists(outfile_dem)) file.remove(outfile_dem)
command = glue::glue("gdalwarp -dstnodata 0 -crop_to_cutline -cutline {outfile} {path_dem} {outfile_dem}")
system(command)
outfile_dem_scaled = here("output", glue("{name}_scaled.tif"))
command_rescale = glue::glue("gdal_translate -scale 0 255 0 6500 -ot UInt16 {outfile_dem} {outfile_dem_scaled}")
system(command_rescale)
}
i = 1
poly = buf[i,]
name = poly$name %>% tolower() %>% gsub("[.-\\s]", "", .) %>% gsub("\\s*", "", .)
outfile = here("output", paste0(name, ".shp"))
st_write(poly, outfile, append=F)
outfile_dem = here("output", glue("{name}.tif"))
outfile_dem
if(file.exists(outfile_dem)) file.remove(outfile_dem)
command = glue::glue("gdalwarp -dstnodata 0 -crop_to_cutline -cutline {outfile} {path_dem} {outfile_dem}")
command
system(command)
outfile_dem_scaled = here("output", glue("{name}_scaled.tif"))
command_rescale = glue::glue("gdal_translate -scale 0 255 0 6500 -ot UInt16 {outfile_dem} {outfile_dem_scaled}")
command_rescale
# write out each ----------------------------------------------------------
for (i in 1:nrow(df_sf)) {
poly = df_sf[i,]
name = poly$name %>% tolower() %>% gsub("[.-\\s]", "", .) %>% gsub("\\s*", "", .)
outfile = here("output", paste0(name, ".shp"))
st_write(poly, outfile, append=F)
outfile_dem = here("output", glue("{name}.tif"))
if(file.exists(outfile_dem)) file.remove(outfile_dem)
command = glue::glue("gdalwarp -dstnodata 0 -crop_to_cutline -cutline {outfile} {path_dem} {outfile_dem}")
system(command)
outfile_dem_scaled = here("output", glue("{name}_scaled.tif"))
command_rescale = glue::glue("gdal_translate -scale 0 255 0 6500 -ot UInt16 {outfile_dem} {outfile_dem_scaled}")
system(command_rescale)
}
df_sf
poly = df_sf[i,]
poly
name = poly$name %>% tolower() %>% gsub("[.-\\s]", "", .) %>% gsub("\\s*", "", .)
outfile = here("output", paste0(name, ".shp"))
st_write(poly, outfile, append=F)
outfile = here("output", paste0(name, ".shp"))
outfile
name = poly$name %>% tolower() %>% gsub("[.-\\s]", "", .) %>% gsub("\\s*", "", .)
name
poly = df_sf[i,]
df_df[["name"]] = points$name
# write out each ----------------------------------------------------------
for (i in 1:nrow(df_sf)) {
poly = df_sf[i,]
name = poly$name %>% tolower() %>% gsub("[.-\\s]", "", .) %>% gsub("\\s*", "", .)
outfile = here("output", paste0(name, ".shp"))
st_write(poly, outfile, append=F)
outfile_dem = here("output", glue("{name}.tif"))
if(file.exists(outfile_dem)) file.remove(outfile_dem)
command = glue::glue("gdalwarp -dstnodata 0 -crop_to_cutline -cutline {outfile} {path_dem} {outfile_dem}")
system(command)
outfile_dem_scaled = here("output", glue("{name}_scaled.tif"))
command_rescale = glue::glue("gdal_translate -scale 0 255 0 6500 -ot UInt16 {outfile_dem} {outfile_dem_scaled}")
system(command_rescale)
}
i = 1
poly = df_sf[i,]
name = poly$name %>% tolower() %>% gsub("[.-\\s]", "", .) %>% gsub("\\s*", "", .)
name
df_sf
df_sf[["name"]] = points$name
df_sf
# write out each ----------------------------------------------------------
for (i in 1:nrow(df_sf)) {
poly = df_sf[i,]
name = poly$name %>% tolower() %>% gsub("[.-\\s]", "", .) %>% gsub("\\s*", "", .)
outfile = here("output", paste0(name, ".shp"))
st_write(poly, outfile, append=F)
outfile_dem = here("output", glue("{name}.tif"))
if(file.exists(outfile_dem)) file.remove(outfile_dem)
command = glue::glue("gdalwarp -dstnodata 0 -crop_to_cutline -cutline {outfile} {path_dem} {outfile_dem}")
system(command)
outfile_dem_scaled = here("output", glue("{name}_scaled.tif"))
command_rescale = glue::glue("gdal_translate -scale 0 255 0 6500 -ot UInt16 {outfile_dem} {outfile_dem_scaled}")
system(command_rescale)
}
# write out each ----------------------------------------------------------
for (i in 1:nrow(df_sf)) {
poly = df_sf[i,]
name = poly$name %>% tolower() %>% gsub("[.-\\s]", "", .) %>% gsub("\\s*", "", .)
outfile = here("output", paste0(name, ".shp"))
st_write(poly, outfile, append=F)
outfile_dem = here("output", glue("{name}.tif"))
if(file.exists(outfile_dem)) file.remove(outfile_dem)
command = glue::glue("gdalwarp -dstnodata 0 -crop_to_cutline -cutline {outfile} {path_dem} {outfile_dem}")
system(command)
outfile_dem_scaled = here("output", glue("{name}_scaled.tif"))
# command_rescale = glue::glue("gdal_translate -scale 0 255 0 6500 -ot UInt16 {outfile_dem} {outfile_dem_scaled}")
# system(command_rescale)
}
i = 1
poly = df_sf[i,]
name = poly$name %>% tolower() %>% gsub("[.-\\s]", "", .) %>% gsub("\\s*", "", .)
outfile = here("output", paste0(name, ".shp"))
st_write(poly, outfile, append=F)
outfile_dem = here("output", glue("{name}.tif"))
if(file.exists(outfile_dem)) file.remove(outfile_dem)
command = glue::glue("gdalwarp -dstnodata 0 -crop_to_cutline -cutline {outfile} {path_dem} {outfile_dem}")
command
poly = df_sf[i,]
name = poly$name %>% tolower() %>% gsub("[.-\\s]", "", .) %>% gsub("\\s*", "", .)
outfile = here("output", paste0(name, ".shp"))
st_write(poly, outfile, append=F)
outfile_dem = here("output", glue("{name}.tif"))
command = glue::glue("gdalwarp -dstnodata 0 -crop_to_cutline -cutline {outfile} {path_dem} {outfile_dem}")
# read out file
cropped = stars::read_stars(outfile_dem)
outfile_dem = here("output", glue("{name}.tif"))
if(file.exists(outfile_dem)) file.remove(outfile_dem)
command = glue::glue("gdalwarp -dstnodata 0 -crop_to_cutline -cutline {outfile} {path_dem} {outfile_dem}")
system(command)
# read out file
cropped = stars::read_stars(outfile_dem)
cropped
min = min(cropped[[1]])
min
max = max(cropped[[1]])
max
outfile_dem_scaled = here("output", glue("{name}_scaled.tif"))
command_rescale = glue::glue("gdal_translate -scale {min} {max} 0 6500 -ot UInt16 {outfile_dem} {outfile_dem_scaled}")
system(command_rescale)
command_rescale = glue::glue("gdal_translate -scale {min} {max} 0 65000 -ot UInt16 {outfile_dem} {outfile_dem_scaled}")
system(command_rescale)
library(stars)
library(sf)
library(here)
library(terra)
library(glue)
# path --------------------------------------------------------------------
path_dem = here("data_raw/himalaya0002.vrt")
path_points = here("data_raw/mountains.csv")
# read data ---------------------------------------------------------------
dem = read_stars(path_dem)
points = read_sf(path_points)
points = st_as_sf(points, coords = c("lon", "lat"), crs=4326)
# create the buffer -------------------------------------------------------
buf = st_buffer(points, 50000, )
# create the buffer -------------------------------------------------------
buf = st_buffer(points, 50000, )
# square buffers ----------------------------------------------------------
radius = .2 # degree
polys = vector("list", lengt=nrow(points))
dem
path_points = here("data_raw/mountains.csv")
# read data ---------------------------------------------------------------
dem = read_stars(path_dem)
points = read_sf(path_points)
points = st_as_sf(points, coords = c("lon", "lat"), crs=4326)
points
# create the buffer -------------------------------------------------------
buf = st_buffer(points, 50000, )
# square buffers ----------------------------------------------------------
radius = .2 # degree
polys = vector("list", lengt=nrow(points))
for (i in 1:nrow(points)) {
point = points[i,]
coords = st_coordinates(point)
bb_coords = st_bbox(c("xmin" = coords[1] - radius,
"ymin" = coords[2] - radius,
"xmax" = coords[1] + radius,
"ymax" = coords[2] + radius))
bb = st_as_sfc(bb_coords) %>% st_as_sf(crs=4326)
polys[[i]] = bb
}
df_sf = do.call("rbind", polys) %>% st_as_sf()
df_sf[["name"]] = points$name
# write out each ----------------------------------------------------------
for (i in 1:nrow(df_sf)) {
poly = df_sf[i,]
name = poly$name %>% tolower() %>% gsub("[.-\\s]", "", .) %>% gsub("\\s*", "", .)
outfile = here("output", paste0(name, ".shp"))
st_write(poly, outfile, append=F)
outfile_dem = here("output", glue("{name}.tif"))
if(file.exists(outfile_dem)) file.remove(outfile_dem)
command = glue::glue("gdalwarp -dstnodata 0 -crop_to_cutline -cutline {outfile} {path_dem} {outfile_dem}")
system(command)
# read out file
cropped = stars::read_stars(outfile_dem)
min = min(cropped[[1]])
max = max(cropped[[1]])
outfile_dem_scaled = here("output", glue("{name}_scaled.tif"))
command_rescale = glue::glue("gdal_translate -scale {min} {max} 0 65000 -ot UInt16 {outfile_dem} {outfile_dem_scaled}")
system(command_rescale)
}
points
