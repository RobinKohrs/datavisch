library(tidyverse)
?read_csv2()
# Use read_csv2 because it's an European file
dat = read_csv2(here("data_raw/ratios.csv"))
# Use read_csv2 because it's an European file
dat = read_csv2(here("data_raw/ratios.csv"))
library(here)
# Use read_csv2 because it's an European file
dat = read_csv2(here("data_raw/ratios.csv"))
dat
dat
dat %>%
pivot_longer(
cols = -1,
names_to = 'type',
values_to = 'ratio'
)
dat %>%
pivot_longer(
cols = -1,
names_to = 'type',
values_to = 'ratio'
) %>%
group_by(type) %>%
summarise(ratio = mean(ratio)) %>%
mutate(location = 'REGION AVERAGE')
### Combine with data
dat_longer <- dat %>%
pivot_longer(
cols = -1,
names_to = 'type',
values_to = 'ratio'
)
dat_longer
dat_longer_with_avgs <- dat_longer %>%
bind_rows(avgs)
dat_longer_with_avgs <- dat_longer %>%
bind_rows(avgs)
avgs <- dat %>%
pivot_longer(
cols = -1,
names_to = 'type',
values_to = 'ratio'
) %>%
group_by(type) %>%
summarise(ratio = mean(ratio)) %>%
mutate(location = 'REGION AVERAGE')
### Combine with data
dat_longer <- dat %>%
pivot_longer(
cols = -1,
names_to = 'type',
values_to = 'ratio'
)
dat_longer_with_avgs <- dat_longer %>%
bind_rows(avgs)
dat_longer_with_avgs %>% tail
install.packages("thematic")
thematic::okabe_ito(8)
thematic::okabe_ito(8)
# Make sure that bars are in the same order as in the data set
dat_factored <- dat_longer %>%
mutate(location = factor(location, levels = dat$location))
library(tidyverse)
library(here)
# Use read_csv2 because it's an European file
dat = read_csv2(here("data_raw/ratios.csv"))
avgs <- dat %>%
pivot_longer(
cols = -1,
names_to = 'type',
values_to = 'ratio'
) %>%
group_by(type) %>%
summarise(ratio = mean(ratio)) %>%
mutate(location = 'REGION AVERAGE')
### Combine with data
dat_longer <- dat %>%
pivot_longer(
cols = -1,
names_to = 'type',
values_to = 'ratio'
)
dat_longer_with_avgs <- dat_longer %>%
bind_rows(avgs)
thematic::okabe_ito(8)
library(tidyverse)
library(here)
# Use read_csv2 because it's an European file
dat = read_csv2(here("data_raw/ratios.csv"))
avgs <- dat %>%
pivot_longer(
cols = -1,
names_to = 'type',
values_to = 'ratio'
) %>%
group_by(type) %>%
summarise(ratio = mean(ratio)) %>%
mutate(location = 'REGION AVERAGE')
### Combine with data
dat_longer <- dat %>%
pivot_longer(
cols = -1,
names_to = 'type',
values_to = 'ratio'
)
dat_longer_with_avgs <- dat_longer %>%
bind_rows(avgs)
thematic::okabe_ito(8)
dat_longer %>% glimpse
p <- dat_factored %>%
ggplot(aes(location, ratio)) +
geom_col(
data = filter(dat_factored, type == 'inventory_turnover'),
fill = color_palette[2]
) +
theme_minimal()
p <- dat_longer %>%
ggplot(aes(location, ratio)) +
geom_col(
data = filter(dat_factored, type == 'inventory_turnover'),
fill = color_palette[2]
) +
theme_minimal()
color_palette = thematic::okabe_ito(8)
# Make sure that bars are in the same order as in the data set
dat_factored <- dat_longer %>%
mutate(location = factor(location, levels = dat$location))
p <- dat_longer %>%
ggplot(aes(location, ratio)) +
geom_col(
data = filter(dat_factored, type == 'inventory_turnover'),
fill = color_palette[2]
) +
theme_minimal()
p
p <- dat_factored %>%
ggplot(aes(location, ratio)) +
geom_col(
data = filter(dat_factored, type == 'inventory_turnover'),
fill = color_palette[2]
) +
theme_minimal()
p
dat_longer %>%
ggplot(aes(location, ratio)) +
geom_col(
data = filter(dat_factored, type == 'inventory_turnover'),
fill = color_palette[2]
) +
theme_minimal()
dat_factored %>%
ggplot(aes(location, ratio)) +
geom_col(
data = filter(dat_factored, type == 'inventory_turnover'),
fill = color_palette[2]
) +
theme_minimal()
p = dat_factored %>%
ggplot(aes(location, ratio)) +
geom_col(
data = filter(dat_factored, type == 'inventory_turnover'),
fill = color_palette[2]
) +
theme_minimal()
p1 <- p +
labs(x = element_blank(), y = element_blank()) +
theme(
axis.text.x = element_text(angle = 50, hjust = 1)
)
p1
p1 + coord_cartesian(ylim = c(0, 30), expand = F)
p1 + coord_cartesian( expand = F)
p2 <- p1 + coord_cartesian(ylim = c(0, 30), expand = F)
p3 <- p2 +
theme(
panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(colour = 'black', size = 0.75)
)
p3
p3 <- p2 +
theme(
panel.grid.minor = element_blank(),
# panel.grid.major.x = element_blank(),
# panel.grid.major.y = element_line(colour = 'black', size = 0.75)
)
p3
p3 <- p2 +
theme(
# panel.grid.minor = element_blank(),
# panel.grid.major.x = element_blank(),
# panel.grid.major.y = element_line(colour = 'black', size = 0.75)
)
p3
p3 <- p2 +
theme(
panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank(),
# panel.grid.major.y = element_line(colour = 'black', size = 0.75)
)
p3
p3 <- p2 +
theme(
panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(colour = 'black', size = 0.75)
)
p3
p4 <- p3 +
scale_y_continuous(
breaks = seq(0, 30, 5),
labels = scales::label_comma(accuracy = 0.1)
)
p4
p5 <- p4 +
geom_point(
data = filter(dat_factored, type == 'store_lower'),
col = color_palette[1],
size = 3
) +
geom_point(
data = filter(dat_factored, type == 'store_upper'),
col = color_palette[3],
size = 3
)
p5
dat_with_avgs <- dat_longer_with_avgs %>%
pivot_wider(
names_from = 'type',
values_from = 'ratio'
)
dat_with_avgs
dat_with_avgs %>%
ggplot() +
geom_rect(
aes(
xmin = store_lower,
xmax = store_upper,
ymin = location,
ymax = location
)
)
dat_with_avgs %>%
ggplot() +
geom_rect(
aes(
xmin = store_lower,
xmax = store_upper,
ymin = location,
ymax = location + 1
)
)
AU %>%
rayshader::sphere_shade(texture = "imhof3") %>%
plot_3d(AU, windowsize = c(400,400),
zscale = 20, zoom = 0.75, phi=89, theta = 0, fov=0, background = "black")
library(rayshader)
library(elevatr)
library(raster)
library(geodata)
library(here)
library(sf)
library(geodata)
library(tidyverse)
# -------------------------------------------------------------------------
# get Country data
# path = here("data_raw/austria_shape")
# geodata::gadm("Austria", level = 1, path = path)
# austria_shape = readRDS(here(path, "gadm36_AUT_1_pk.rds")) %>% terra::vect() %>%
#   st_as_sf()
austria_shape = read_sf("~/projects/geodata/world/world_4236.geojson") %>%
filter(
NAME == "Austria"
)
austria_raster = elevatr::get_elev_raster(austria_shape, z=6)
au = mask(austria_raster, austria_shape)
AU = as.matrix(au)
# rayshaer ----------------------------------------------------------------
AU %>%
rayshader::sphere_shade(texture = "imhof3") %>%
plot_3d(AU, windowsize = c(400,400),
zscale = 20, zoom = 0.75, phi=89, theta = 0, fov=0, background = "black")
out_dir = here("_rayshader_adventures/output")
if(!dir.exists(out_dir)) dir.create(out_dir)
out_file = here(out_dir, "au.png")
render_highquality(out_file, samples=100, width=1000, height=1000)
remove.packages("rayrender")
# To install the latest version from Github:
# install.packages("devtools")
devtools::install_github("tylermorganwall/rayrender")
library(rayshader)
library(elevatr)
library(raster)
library(geodata)
library(here)
library(sf)
library(geodata)
library(tidyverse)
# -------------------------------------------------------------------------
# get Country data
# path = here("data_raw/austria_shape")
# geodata::gadm("Austria", level = 1, path = path)
# austria_shape = readRDS(here(path, "gadm36_AUT_1_pk.rds")) %>% terra::vect() %>%
#   st_as_sf()
austria_shape = read_sf("~/projects/geodata/world/world_4236.geojson") %>%
filter(
NAME == "Austria"
)
austria_raster = elevatr::get_elev_raster(austria_shape, z=6)
au = mask(austria_raster, austria_shape)
AU = as.matrix(au)
# rayshaer ----------------------------------------------------------------
AU %>%
rayshader::sphere_shade(texture = "imhof3") %>%
plot_3d(AU, windowsize = c(400,400),
zscale = 20, zoom = 0.75, phi=89, theta = 0, fov=0, background = "black")
out_dir = here("_rayshader_adventures/output")
if(!dir.exists(out_dir)) dir.create(out_dir)
out_file = here(out_dir, "au.png")
render_highquality(out_file, samples=100, width=1000, height=1000)
