download.file(url, output_file, method = "libcurl")
},
warning = function(c) {
return(c)
})
if (res != 0) {
cat(paste0(tile, "\n"), file = missing_tiles_path, append = T)
}
# unzip
unzip(output_file, exdir = output_dir)
counter = counter + 1
}
}
counter = 0
for (i in seq_along(lines)) {
corner = lines[[i]]
corner_main_row = gsub("^(\\d{4})-.*", "\\1", corner) %>% as.numeric()
for (j in 1:100) {
print(j)
# output path
tile = glue("{corner_main_row}-{formatC(j, 2, width=2,flag = '0')}")
output_file = makePath(here(output_dir, glue("{tile}.zip")))
if(file.exists(output_file)) next
# url
url = glue("https://gis.tirol.gv.at/geo/als/mosaik_1m/m28/tif/tif_1m_{tile}.zip")
# try to download
res = tryCatch({
download.file(url, output_file, method = "libcurl")
},
warning = function(c) {
return(c)
})
if (res != 0) {
cat(paste0(tile, "\n"), file = missing_tiles_path, append = T)
}
# unzip
unzip(output_file, exdir = output_dir)
counter = counter + 1
}
}
j = 83
i
print(j)
# output path
tile = glue("{corner_main_row}-{formatC(j, 2, width=2,flag = '0')}")
output_file = makePath(here(output_dir, glue("{tile}.zip")))
if(file.exists(output_file)) next
# url
url = glue("https://gis.tirol.gv.at/geo/als/mosaik_1m/m28/tif/tif_1m_{tile}.zip")
# try to download
res = tryCatch({
download.file(url, output_file, method = "libcurl")
},
warning = function(c) {
return(c)
})
res
if (res != 0) {
cat(paste0(tile, "\n"), file = missing_tiles_path, append = T)
}
for (i in seq_along(lines)) {
corner = lines[[i]]
corner_main_row = gsub("^(\\d{4})-.*", "\\1", corner) %>% as.numeric()
for (j in 1:100) {
print(j)
# output path
tile = glue("{corner_main_row}-{formatC(j, 2, width=2,flag = '0')}")
output_file = makePath(here(output_dir, glue("{tile}.zip")))
if(file.exists(output_file)) next
# url
url = glue("https://gis.tirol.gv.at/geo/als/mosaik_1m/m28/tif/tif_1m_{tile}.zip")
# try to download
res = tryCatch({
download.file(url, output_file, method = "libcurl")
},
warning = function(c) {
return(c)
})
if (is.character(res)) {
cat(paste0(tile, "\n"), file = missing_tiles_path, append = T)
}
# unzip
unzip(output_file, exdir = output_dir)
counter = counter + 1
}
}
for (i in seq_along(lines)) {
corner = lines[[i]]
corner_main_row = gsub("^(\\d{4})-.*", "\\1", corner) %>% as.numeric()
for (j in 1:100) {
print(j)
# output path
tile = glue("{corner_main_row}-{formatC(j, 2, width=2,flag = '0')}")
output_file = makePath(here(output_dir, glue("{tile}.zip")))
if(file.exists(output_file)) next
# url
url = glue("https://gis.tirol.gv.at/geo/als/mosaik_1m/m28/tif/tif_1m_{tile}.zip")
# try to download
res = tryCatch({
download.file(url, output_file, method = "libcurl")
},
warning = function(c) {
return(c)
})
if (is.character(res)) {
cat(paste0(tile, "\n"), file = missing_tiles_path, append = T)
}
# unzip
unzip(output_file, exdir = output_dir)
counter = counter + 1
}
}
# merge the DOMs ----------------------------------------------------------
dom_paths = dir(output_dir, "^dom.*")
dom_paths
# merge the DOMs ----------------------------------------------------------
dom_paths = dir(output_dir, "^dom(?!.*shd).*")
# merge the DOMs ----------------------------------------------------------
dom_paths = dir(output_dir, full.names = T)
dom_paths
dom_paths = str_subset(all_files, "^dom(?!.*shd).*")
# merge the DOMs ----------------------------------------------------------
all_files = dir(output_dir, full.names = T)
dom_paths = str_subset(all_files, "^dom(?!.*shd).*")
dom_paths
grepl("^dom(?!.*shd).*", all_files, perl = T)
sum(grepl("^dom(?!.*shd).*", all_files, perl = T))
grep("^dom(?!.*shd).*", all_files, perl = T)
# merge the DOMs ----------------------------------------------------------
all_files = dir(output_dir, full.names = T)
all_files
grep("^dom(?!.*shd).*", all_files, perl = T)
grep("dom(?!.*shd).*", all_files, perl = T)
dom_paths = all_files[which(grep("dom(?!.*shd).*", all_files, perl = T))]
# merge the DOMs ----------------------------------------------------------
all_files = dir(output_dir, full.names = T)
dom_paths = all_files[which(grep("dom(?!.*shd).*", all_files, perl = T))]
dom_paths = all_files[grep("dom(?!.*shd).*", all_files, perl = T)]
dom_paths
cat(dom_paths)
# create the gdal command -------------------------------------------------
command = glue("gdal_merge.py -o innsbruck_merged_31254.tiff -ot GTiff {cat(dom_paths)}")
command
# create the gdal command -------------------------------------------------
command = glue("gdal_merge.py -o innsbruck_merged_31254.tiff -ot GTiff {cat(dom_paths)}")
?cat
paste0(dom_paths)
paste0(dom_paths, collapse = " ")
# create the gdal command -------------------------------------------------
command = glue("gdal_merge.py -o innsbruck_merged_31254.tiff -ot GTiff {paste0(dom_paths, collapse=` `)}")
dp = paste0(dom_paths, collapse = " ")
dp
# create the gdal command -------------------------------------------------
command = glue("gdal_merge.py -o innsbruck_merged_31254.tiff -ot GTiff {dp}")
command
# execute -----------------------------------------------------------------
system(command)
# create the gdal command -------------------------------------------------
command = glue("gdal_merge.py -o innsbruck_merged_31254.tiff -of GTiff {dp}")
# execute -----------------------------------------------------------------
system(command)
# merge the DOMs ----------------------------------------------------------
all_files = dir(output_dir, full.names = T)
dom_paths = all_files[grep("dom(?!.*shd).*", all_files, perl = T)]
dp = paste0(dom_paths, collapse = " ")
dom_paths %>% length
# create the gdal command -------------------------------------------------
command = glue("gdal_merge.py -o innsbruck_merged_31254.tiff -of GTiff {dp}")
# create the gdal command -------------------------------------------------
command = glue("gdal_merge.py -o ../data_raw/innsbruck_merged_31254.tiff -of GTiff {dp}")
# execute -----------------------------------------------------------------
system(command)
# create the gdal command -------------------------------------------------
command = glue("gdal_merge.py -o ~/geodata/innsbruck/demDownload/innsbruck_merged_31254.tiff -of GTiff {dp}")
# execute -----------------------------------------------------------------
system(command)
lines
i = 4
corner = lines[[i]]
corner_main_row = gsub("^(\\d{4})-.*", "\\1", corner) %>% as.numeric()
corner_main_row
for (j in 1:100) {
print(j)
# output path
tile = glue("{corner_main_row}-{formatC(j, 2, width=2,flag = '0')}")
output_file = makePath(here(output_dir, glue("{tile}.zip")))
if(file.exists(output_file)) next
# url
url = glue("https://gis.tirol.gv.at/geo/als/mosaik_1m/m28/tif/tif_1m_{tile}.zip")
# try to download
res = tryCatch({
download.file(url, output_file, method = "libcurl")
},
warning = function(c) {
return(c)
})
if (is.character(res)) {
cat(paste0(tile, "\n"), file = missing_tiles_path, append = T)
}
# unzip
unzip(output_file, exdir = output_dir)
counter = counter + 1
}
print(j)
# output path
tile = glue("{corner_main_row}-{formatC(j, 2, width=2,flag = '0')}")
upper_left =  "2325-43"
lower_left = "2324-59"
lower_right =  "2524-58"
missing_path =  "2424-26"
# paths -------------------------------------------------------------------
output_dir = makePath("~/geodata/innsbruck/demDownload/")
# url ---------------------------------------------------------------------
lines = c(upper_left, upper_right, lower_right, lower_left, missing_path)
missing_tiles_path = "~/geodata/innsbruck/demDownload/missingTiles.txt"
counter = 0
for (i in seq_along(lines)) {
corner = lines[[i]]
corner_main_row = gsub("^(\\d{4})-.*", "\\1", corner) %>% as.numeric()
for (j in 1:100) {
print(j)
# output path
tile = glue("{corner_main_row}-{formatC(j, 2, width=2,flag = '0')}")
output_file = makePath(here(output_dir, glue("{tile}.zip")))
if(file.exists(output_file)) next
# url
url = glue("https://gis.tirol.gv.at/geo/als/mosaik_1m/m28/tif/tif_1m_{tile}.zip")
# try to download
res = tryCatch({
download.file(url, output_file, method = "libcurl")
},
warning = function(c) {
return(c)
})
if (is.character(res)) {
cat(paste0(tile, "\n"), file = missing_tiles_path, append = T)
}
# unzip
unzip(output_file, exdir = output_dir)
counter = counter + 1
}
}
# merge the DOMs ----------------------------------------------------------
all_files = dir(output_dir, full.names = T)
dom_paths = all_files[grep("dom(?!.*shd).*", all_files, perl = T)]
dp = paste0(dom_paths, collapse = " ")
length(dp)
# merge the DOMs ----------------------------------------------------------
all_files = dir(output_dir, full.names = T)
dom_paths = all_files[grep("dom(?!.*shd).*", all_files, perl = T)]
dp = paste0(dom_paths, collapse = " ")
dp
length(dom_paths)
# create the gdal command -------------------------------------------------
command = glue("gdal_merge.py -o ~/geodata/innsbruck/demDownload/innsbruck_merged_31254.tiff -of GTiff {dp}")
# build a vrt -------------------------------------------------------------
command_vrt = glue("gdalbuildvrt innsbruck_merged_31254.vrt {dp}")
# execute -----------------------------------------------------------------
system(command_vrt)
# build a vrt -------------------------------------------------------------
command_vrt = glue("gdalbuildvrt ~/geodata/innsbruck/demDownload/innsbruck_merged_31254.vrt {dp}")
# execute -----------------------------------------------------------------
system(command_vrt)
system(command)
missing_path2 =  "2326-11"
# paths -------------------------------------------------------------------
output_dir = makePath("~/geodata/innsbruck/demDownload/")
# url ---------------------------------------------------------------------
lines = c(upper_left, upper_right, lower_right, lower_left, missing_path)
missing_tiles_path = "~/geodata/innsbruck/demDownload/missingTiles.txt"
counter = 0
for (i in seq_along(lines)) {
corner = lines[[i]]
corner_main_row = gsub("^(\\d{4})-.*", "\\1", corner) %>% as.numeric()
for (j in 1:100) {
print(j)
# output path
tile = glue("{corner_main_row}-{formatC(j, 2, width=2,flag = '0')}")
output_file = makePath(here(output_dir, glue("{tile}.zip")))
if(file.exists(output_file)) next
# url
url = glue("https://gis.tirol.gv.at/geo/als/mosaik_1m/m28/tif/tif_1m_{tile}.zip")
# try to download
res = tryCatch({
download.file(url, output_file, method = "libcurl")
},
warning = function(c) {
return(c)
})
if (is.character(res)) {
cat(paste0(tile, "\n"), file = missing_tiles_path, append = T)
}
# unzip
unzip(output_file, exdir = output_dir)
counter = counter + 1
}
}
# url ---------------------------------------------------------------------
lines = c(upper_left, upper_right, lower_right, lower_left, missing_path, missing_path2)
missing_tiles_path = "~/geodata/innsbruck/demDownload/missingTiles.txt"
counter = 0
for (i in seq_along(lines)) {
corner = lines[[i]]
corner_main_row = gsub("^(\\d{4})-.*", "\\1", corner) %>% as.numeric()
for (j in 1:100) {
print(j)
# output path
tile = glue("{corner_main_row}-{formatC(j, 2, width=2,flag = '0')}")
output_file = makePath(here(output_dir, glue("{tile}.zip")))
if(file.exists(output_file)) next
# url
url = glue("https://gis.tirol.gv.at/geo/als/mosaik_1m/m28/tif/tif_1m_{tile}.zip")
# try to download
res = tryCatch({
download.file(url, output_file, method = "libcurl")
},
warning = function(c) {
return(c)
})
if (is.character(res)) {
cat(paste0(tile, "\n"), file = missing_tiles_path, append = T)
}
# unzip
unzip(output_file, exdir = output_dir)
counter = counter + 1
}
}
# merge the DOMs ----------------------------------------------------------
all_files = dir(output_dir, full.names = T)
dom_paths = all_files[grep("dom(?!.*shd).*", all_files, perl = T)]
dp = paste0(dom_paths, collapse = " ")
dp
dom_paths = all_files[grep("dom(?!.*shd).*", all_files, perl = T)]
dom_paths
basename(dom_paths)
dp_vrt = paste0(basename(dom_paths), collapse = " ")
dp_vrt
# create the gdal command -------------------------------------------------
command = glue("gdal_merge.py -o ~/geodata/innsbruck/demDownload/innsbruck_merged_31254.tiff -of GTiff {dp}")
# build a vrt -------------------------------------------------------------
command_vrt = glue("gdalbuildvrt ~/geodata/innsbruck/demDownload/innsbruck_merged_31254.vrt {dp}")
# execute -----------------------------------------------------------------
system(command_vrt)
dp_vrt = paste0("./", basename(dom_paths), collapse = " ")
dp_vrt
# create the gdal command -------------------------------------------------
command = glue("gdal_merge.py -o ~/geodata/innsbruck/demDownload/innsbruck_merged_31254.tiff -of GTiff {dp}")
# build a vrt -------------------------------------------------------------
command_vrt = glue("gdalbuildvrt ~/geodata/innsbruck/demDownload/innsbruck_merged_31254.vrt {dp}")
# execute -----------------------------------------------------------------
system(command_vrt)
head(dp_vrt)
head(dp)
head(dom_paths)
system(command)
hall =  "2425-11"
# url ---------------------------------------------------------------------
lines = c(upper_left, upper_right, lower_right, lower_left, missing_path, missing_path2, hall)
missing_tiles_path = "~/geodata/innsbruck/demDownload/missingTiles.txt"
counter = 0
for (i in seq_along(lines)) {
corner = lines[[i]]
corner_main_row = gsub("^(\\d{4})-.*", "\\1", corner) %>% as.numeric()
for (j in 1:100) {
print(j)
# output path
tile = glue("{corner_main_row}-{formatC(j, 2, width=2,flag = '0')}")
output_file = makePath(here(output_dir, glue("{tile}.zip")))
if(file.exists(output_file)) next
# url
url = glue("https://gis.tirol.gv.at/geo/als/mosaik_1m/m28/tif/tif_1m_{tile}.zip")
# try to download
res = tryCatch({
download.file(url, output_file, method = "libcurl")
},
warning = function(c) {
return(c)
})
if (is.character(res)) {
cat(paste0(tile, "\n"), file = missing_tiles_path, append = T)
}
# unzip
unzip(output_file, exdir = output_dir)
counter = counter + 1
}
}
# merge the DOMs ----------------------------------------------------------
all_files = dir(output_dir, full.names = T)
dom_paths = all_files[grep("dom(?!.*shd).*", all_files, perl = T)]
dp = paste0(dom_paths, collapse = " ")
dp_vrt = paste0("./", basename(dom_paths), collapse = " ")
length(dom_paths)
# create the gdal command -------------------------------------------------
command = glue("gdal_merge.py -o ~/geodata/innsbruck/demDownload/innsbruck_merged_31254.tiff -of GTiff {dp}")
# build a vrt -------------------------------------------------------------
command_vrt = glue("gdalbuildvrt ~/geodata/innsbruck/demDownload/innsbruck_merged_31254.vrt {dp_vrt}")
# execute -----------------------------------------------------------------
system(command_vrt)
# build a vrt -------------------------------------------------------------
command_vrt = glue("gdalbuildvrt ~/geodata/innsbruck/demDownload/innsbruck_merged_31254.vrt {dp}")
# merge the DOMs ----------------------------------------------------------
all_files = dir(output_dir, full.names = T)
dom_paths = all_files[grep("dom(?!.*shd).*", all_files, perl = T)]
dp = paste0(dom_paths, collapse = " ")
# create the gdal command -------------------------------------------------
command = glue("gdal_merge.py -o ~/geodata/innsbruck/demDownload/innsbruck_merged_31254.tiff -of GTiff {dp}")
# build a vrt -------------------------------------------------------------
command_vrt = glue("gdalbuildvrt ~/geodata/innsbruck/demDownload/innsbruck_merged_31254.vrt {dp}")
# execute -----------------------------------------------------------------
system(command_vrt)
system(command)
dp
# build a vrt -------------------------------------------------------------
command_vrt = glue("gdalbuildvrt ~/geodata/innsbruck/demDownload/innsbruck_merged_31254.vrt {dp}")
command_vrt
basename(dp)
basename(dom_paths)
# build a vrt -------------------------------------------------------------
command_vrt = glue("gdalbuildvrt ~/geodata/innsbruck/demDownload/innsbruck_merged_31254.vrt {basename(dom_paths)}")
command_vrt
# build a vrt -------------------------------------------------------------
command_vrt = glue("gdalbuildvrt ~/geodata/innsbruck/demDownload/innsbruck_merged_31254.vrt {paste0(basename(dom_paths), collapse=" ")}")
# build a vrt -------------------------------------------------------------
command_vrt = glue("gdalbuildvrt ~/geodata/innsbruck/demDownload/innsbruck_merged_31254.vrt {paste0(basename(dom_paths), collapse=' ')}")
command_vrt
# execute -----------------------------------------------------------------
system(command_vrt)
dom_paths
# build a vrt -------------------------------------------------------------
command_vrt = glue("gdalbuildvrt /home/robin/geodata/innsbruck/demDownload/innsbruck_merged_31254.vrt {dp}")
# execute -----------------------------------------------------------------
system(command_vrt)
zips = dir(output_dir, ".*.zip")
zips
zips = dir(output_dir, ".*.zip", full.names = T)
zips
unlink(zips)
tile
dir(tile, output_dir)
i = 1
j = 1
print(j)
# output path
tile = glue("{corner_main_row}-{formatC(j, 2, width=2,flag = '0')}")
tile
if(file.exists(output_file)) next
dir(tile, output_dir)
# url ---------------------------------------------------------------------
lines = c(upper_left, upper_right, lower_right, lower_left, missing_path, missing_path2, hall)
missing_tiles_path = "~/geodata/innsbruck/demDownload/missingTiles.txt"
dir(tile, output_dir)
dir(tile, glue(".*{output_dir}.*"))
tile
dir(output_dir, tile)
upper_left =  "2325-43"
lower_left = "2324-59"
lower_right =  "2524-58"
upper_right =  "2525-26"
missing_path =  "2424-26"
missing_path2 =  "2326-11"
hall =  "2425-11"
# paths -------------------------------------------------------------------
output_dir = makePath("~/geodata/innsbruck/demDownload/")
# url ---------------------------------------------------------------------
lines = c(upper_left, upper_right, lower_right, lower_left, missing_path, missing_path2, hall)
missing_tiles_path = "~/geodata/innsbruck/demDownload/missingTiles.txt"
counter = 0
for (i in seq_along(lines)) {
corner = lines[[i]]
corner_main_row = gsub("^(\\d{4})-.*", "\\1", corner) %>% as.numeric()
for (j in 1:100) {
print(j)
# output path
tile = glue("{corner_main_row}-{formatC(j, 2, width=2,flag = '0')}")
output_file = makePath(here(output_dir, glue("{tile}.zip")))
if(file.exists(output_file)) next
if(length(dir(output_dir, tile)) > 0) next
# url
url = glue("https://gis.tirol.gv.at/geo/als/mosaik_1m/m28/tif/tif_1m_{tile}.zip")
# try to download
res = tryCatch({
download.file(url, output_file, method = "libcurl")
},
warning = function(c) {
return(c)
})
if (is.character(res)) {
cat(paste0(tile, "\n"), file = missing_tiles_path, append = T)
unlink(output_file)
}
# unzip
unzip(output_file, exdir = output_dir)
counter = counter + 1
}
}
# merge the DOMs ----------------------------------------------------------
all_files = dir(output_dir, full.names = T)
dom_paths = all_files[grep("dom(?!.*shd).*", all_files, perl = T)]
dp = paste0(dom_paths, collapse = " ")
# create the gdal command -------------------------------------------------
command = glue("gdal_merge.py -o ~/geodata/innsbruck/demDownload/innsbruck_merged_31254.tiff -of GTiff {dp}")
# build a vrt -------------------------------------------------------------
command_vrt = glue("gdalbuildvrt /home/robin/geodata/innsbruck/demDownload/innsbruck_merged_31254.vrt {dp}")
# execute -----------------------------------------------------------------
system(command_vrt)
system(command)
dp
# build a vrt -------------------------------------------------------------
command_vrt = glue("gdalbuildvrt /home/robin/geodata/innsbruck/demDownload//innsbruck_merged_31254.vrt {dp}")
# execute -----------------------------------------------------------------
system(command_vrt)
system(command)
